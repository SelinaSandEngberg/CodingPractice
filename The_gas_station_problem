# Given a circular list of gas stations where we can go from a station i to the station i + 1, 
# and the last one goes back to the first one, find the index of the station from where we start 
# to be able to traverse all the stations and go back to the initial one without running out of gas

# Note that
# - We can only move forward
# - The gas tank starts empty
# - gass[i] represents the amount of gas at the station i
# - cost[i] represents the cost to go from the station i to the next one
# - the answer is guaranteed to be unique
# - if the station we're searching for dosen't exist. return -1

gas = [ 1, 5, 3, 3, 5, 3, 1, 3, 4, 5]
cost = [5, 2, 2, 8, 2, 4, 2, 5, 1, 2]

# output should be 8

# Solution 1 (go through every element): Time =  O(n^2) Space = O(1)

# check if one can traverse from a start point start
def can_traverse(gas, cost, start):
    n = len(gas)
    remaining = 0
    i = start
    started = False
    while i != start or not started:
        started = True
        remaining += gas[i] - cost[i]
        if remaining < 0:
            return False
        i = (i+1)%n # go to next station (+1) but mod it by n to go back to the first one if we go past th last station
    return True

# main function
def gas_station(gas, cost):
    for i in range(len(gas)):
        if can_traverse(gas, cost, i):
            return i
    return -1

# Solution 2 (change next start to last place we ended as all the stations in between would be invalid):
# Time = O(n) Space = O(1)

# main function:

def gas_station(gas, cost):
    remaining = 0
    prev_remaining = 0
    candidate = 0
    for i in range(len(gas)): # O(n)
        remaining += gas[i] - cost[i]
        if remaining < 0:
            candidate = i+1
            prev_remaining += remaining
            remaining = 0
    if candidate == len(gas) or remaining+prev_remaining < 0: 
    # checks if we have no candidate, no station made it to the end of the array
    # if we have a candidate, but it couldn't traverse the second part of the cycle
    # We have a candidate, and it could traverse both parts, it is the station we are searching for
        return -1
    else:
        return candidate
        
        
